name: Croissant Release to Maven Central Repository

on:
    push:
        branches:
            - croissant
        paths:
            - "croissant/**"
    pull_request:
        branches:
            - main
        paths:
            - "croissant/**"
    workflow_dispatch:

jobs:
    # Note: Pushing packages to Maven Central requires access to secrets, which pull requests from remote forks
    #       don't have. Skip in these cases.
    check-secrets:
        name: Check for Secrets Availability
        runs-on: ubuntu-latest
        outputs:
            available: ${{ steps.secret-check.outputs.available }}
        steps:
            -   id: secret-check
                # perform secret check & put boolean result as an output
                shell: bash
                run: |
                    if [ "${{ secrets.DATAVERSEBOT_SONATYPE_USERNAME }}" != '' ]; then
                        echo "available=true" >> $GITHUB_OUTPUT;
                    else
                        echo "available=false" >> $GITHUB_OUTPUT;
                    fi

    release:
        name: Release
        needs: check-secrets
        runs-on: ubuntu-latest
        #if: github.event_name == 'push' && needs.check-secrets.outputs.available == 'true'
        if: github.event_name == 'pull_request' && needs.check-secrets.outputs.available == 'true'
        steps:
            -   uses: actions/checkout@v3
            -   uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'adopt'
            -   uses: actions/cache@v2
                with:
                    path: ~/.m2
                    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                    restore-keys: ${{ runner.os }}-m2

            # Running setup-java again overwrites the settings.xml - IT'S MANDATORY TO DO THIS SECOND SETUP!!!
            -   name: Set up Maven Central Repository
                uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'adopt'
                    server-id: ossrh
                    server-username: MAVEN_USERNAME
                    server-password: MAVEN_PASSWORD
                    gpg-private-key: ${{ secrets.DATAVERSEBOT_GPG_KEY }}
                    gpg-passphrase: MAVEN_GPG_PASSPHRASE

            -   name: Sign + Publish Release
                run: mvn -f croissant -P release deploy
                env:
                    MAVEN_USERNAME: ${{ secrets.DATAVERSEBOT_SONATYPE_USERNAME }}
                    MAVEN_PASSWORD: ${{ secrets.DATAVERSEBOT_SONATYPE_TOKEN }}
                    MAVEN_GPG_PASSPHRASE: ${{ secrets.DATAVERSEBOT_GPG_PASSWORD }}
